{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","store/peopleContext.tsx","utils/getCentury.tsx","components/Pages/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/Pages/PeoplePage.tsx","components/Pages/ErrorPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeopleContext","React","createContext","people","loading","loadingError","filterPeople","SortValues","OrderValue","UsersProvider","children","useState","setPeople","setLoading","setLoadingError","useEffect","getPeople","catch","finally","value","query","sex","centuries","sort","order","preparedPeople","preparedQuery","trim","toLowerCase","filter","person","name","motherName","fatherName","includes","length","year","born","personCentury","String","Math","trunc","person1","person2","localeCompare","died","desc","reverse","Provider","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","get","getAll","getNewCenturies","century","letter","Centuries","type","onChange","event","setSearchWith","target","placeholder","map","Loader","PersonLink","slug","PeopleTable","slugId","useParams","sortType","getParentLink","parent","find","par","getSortParams","changeSort","newOrder","getSortClass","PeoplePage","useContext","filteredPeople","useMemo","ErrorPage","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"kQAGMA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyCC,IAC5D,cACA,CAAE,8BAA+BD,GAFd,EAKRE,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAWJ,EAFb,kBAOA,cAAC,IAAD,CACEM,GAAG,UACHF,UAAWJ,EAFb,0BAUT,EC9BYO,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKH,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,G,4CCdKI,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCFA,IAAMC,EAAgBC,IAAMC,cAAuB,CACxDC,OAAQ,GACRC,SAAS,EACTC,cAAc,EACdC,aAAc,iBAAM,EAAN,IAOXC,E,SAAAA,G,OAAAA,E,YAAAA,E,UAAAA,E,YAAAA,E,YAAAA,C,EAAAA,G,IAOAC,E,SAAAA,G,OAAAA,E,YAAAA,C,EAAAA,G,IAIQC,EAAiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/C,EAA4BC,mBAAmB,IAA/C,mBAAOR,EAAP,KAAeS,EAAf,KACA,EAA8BD,oBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAwCF,oBAAS,GAAjD,mBAAON,EAAP,KAAqBS,EAArB,KAEAC,qBAAU,WACRF,GAAW,GD1BR,WAAP,+BC4BIG,GACGpB,KAAKgB,GACLK,OAAM,kBAAMH,GAAgB,EAAtB,IACNI,SAAQ,kBAAML,GAAW,EAAjB,GACZ,GAAE,IAEH,IA4DMM,EAAQ,CACZhB,SACAC,UACAC,eACAC,aAhEmB,SAAC,GAQN,IAAD,IANXc,aAMW,MANH,GAMG,MALXC,WAKW,MALL,GAKK,MAJXC,iBAIW,MAJC,GAID,MAHXC,YAGW,MAHJ,GAGI,MAFXC,aAEW,MAFH,GAEG,EACTC,EAAc,YAAOtB,GAEnBuB,EAAgBN,EAAMO,OAAOC,cA8CnC,OA5CIF,IACFD,EAAiBA,EAAeI,QAAO,SAAAC,GACrC,IAAQC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,WAAYC,EAAeH,EAAfG,WAE1B,OAAOF,EAAKH,cAAcM,SAASR,KAA5B,OACFM,QADE,IACFA,OADE,EACFA,EAAYJ,cAAcM,SAASR,MADjC,OAEFO,QAFE,IAEFA,OAFE,EAEFA,EAAYL,cAAcM,SAASR,GACzC,KAGCL,IACFI,EAAiBA,EAAeI,QAAO,SAAAC,GAAM,OAAIA,EAAOT,MAAQA,CAAnB,KAG3CC,EAAUa,OAAS,IACrBV,EAAiBA,EAAeI,QAAO,SAAAC,GACrC,ICxEmBM,EDwEXC,EAASP,EAATO,KACFC,GCzEaF,EDyEcC,ECxEhCE,OAASH,EAAO,IAEnBI,KAAKC,MAAML,EAAO,KAAO,EADzBI,KAAKC,MAAML,EAAO,ODyEhB,OAAOd,EAAUY,SAASI,EAC3B,KAGCf,GACFE,EAAeF,MAAK,SAACmB,EAASC,GAC5B,OAAQpB,GACN,KAAKhB,EAAWwB,KAChB,KAAKxB,EAAWc,IACd,OAAOqB,EAAQnB,GAAMqB,cAAcD,EAAQpB,IAE7C,KAAKhB,EAAW8B,KAChB,KAAK9B,EAAWsC,KACd,OAAOH,EAAQnB,GAAQoB,EAAQpB,GAEjC,QACE,OAAO,EAEZ,IAGCC,IAAUhB,EAAWsC,MACvBrB,EAAesB,UAGVtB,CACR,GASD,OACE,cAACzB,EAAcgD,SAAf,CAAwB7B,MAAOA,EAA/B,SACGT,GAGN,EEnHM,IAAMuC,EAAW,WACtB,OACE,oBAAI/D,UAAU,QAAd,sBAEH,ECIM,SAASgE,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXxC,EAAW,KACX,OAAVA,EACFkC,EAAUO,OAAOD,GACRE,MAAMC,QAAQ3C,IAEvBkC,EAAUO,OAAOD,GAEjBxC,EAAMuC,SAAQ,SAAAK,GACZV,EAAUW,OAAOL,EAAKI,EACvB,KAEDV,EAAUY,IAAIN,EAAKxC,EAEtB,IAGIkC,EAAUE,UAClB,C,4CC/BYW,EAA8B,SAAC,GAIrC,IAHLxD,EAGI,EAHJA,SACAyD,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIElF,GAAI,CACFmF,OAAQrB,EAAcoB,EAAcH,KAElCC,GAPN,aASG1D,IAGN,EC9BY8D,EAAgB,WAC3B,MAAwCH,cAAxC,mBAAOC,EAAP,KAAqBG,EAArB,KACMrD,EAAQkD,EAAaI,IAAI,UAAY,GACrCpD,EAAYgD,EAAaK,OAAO,cAAgB,GAChDtD,EAAMiD,EAAaI,IAAI,QAAU,KAGvC,SAASE,EAAgBC,GACvB,OAAOvD,EAAUY,SAAS2C,GACtBvD,EAAUO,QAAO,SAAAiD,GAAM,OAAIA,IAAWD,CAAf,IADpB,sBAECvD,GAFD,CAEYuD,GACpB,CAED,IAA0BE,EA0B1B,OACE,sBAAK7F,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEiF,OAAQ,CAAE9C,IAAK,MACfnC,UAAWF,IAAW,CACpB,aAAcqC,IAHlB,iBAQA,cAAC,EAAD,CACE8C,OAAQ,CAAE9C,IAAK,KACfnC,UAAWF,IAAW,CACpB,YAAqB,MAARqC,IAHjB,kBAQA,cAAC,EAAD,CACE8C,OAAQ,CAAE9C,IAAK,KACfnC,UAAWF,IAAW,CACpB,YAAqB,MAARqC,IAHjB,uBAUF,qBAAKnC,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACR8F,KAAK,SACL9F,UAAU,QACViC,MAAOC,EACP6D,SA1CV,SAA2BC,IAN3B,SAAuBf,GACrB,IAAMI,EAASrB,EAAcoB,EAAcH,GAE3CM,EAAgBF,EACjB,CAGCY,CAAc,CAAE/D,MAAO8D,EAAME,OAAOjE,OAAS,MAC9C,EAyCSkE,YAAY,WAGd,sBAAMnG,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,UA5EkB6F,EARL,CAAC,KAAM,KAAM,KAAM,KAAM,MASpCA,EAAUO,KAAI,SAAAT,GAAO,OAC3B,cAAC,EAAD,CACEV,OAAQ,CAAE7C,UAAWsD,EAAgBC,IACrC,UAAQ,UACR3F,UAAWF,IACT,cACA,CAAE,UAAWsC,EAAUY,SAAS2C,KALpC,SASGA,GAFIA,EARoB,OA+EvB,qBAAK3F,UAAU,mBAAf,SACE,cAAC,EAAD,CACEiF,OAAQ,CAAE7C,UAAW,MACrB,UAAQ,aACRpC,UAAWF,IACT,oBACA,CAAE,cAAesC,EAAUa,OAAS,IALxC,wBAcN,qBAAKjD,UAAU,cAAf,SACE,cAAC,EAAD,CACEiF,OAAQ,CACN9C,IAAK,KACLD,MAAO,KACPE,UAAW,MAEbpC,UAAU,0CANZ,mCAcP,EC9HYqG,G,MAAS,kBACpB,qBAAKrG,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOTsG,EAA8B,SAAC,GAAgB,IAAd1D,EAAa,EAAbA,OACpCC,EAAoBD,EAApBC,KAAM0D,EAAc3D,EAAd2D,KAAMpE,EAAQS,EAART,IAEpB,OACE,cAAC,IAAD,CACEjC,GAAIqG,EACJvG,UAAWF,IAAW,CACpB,kBAA2B,MAARqC,IAHvB,SAMGU,GAGN,ECXY2D,EAA+B,SAAC,GAAgB,IAAdvF,EAAa,EAAbA,OAC7C,EAAuBkE,cAAhBC,EAAP,oBACQqB,EAAWC,cAAXD,OACFE,EAAWvB,EAAaI,IAAI,SAAW,KACvClD,EAAQ8C,EAAaI,IAAI,UAAY,KAErCoB,EAAgB,SAAC/D,GACrB,IAAKA,EACH,MAAO,IAGT,IAAMgE,EAAS5F,EAAO6F,MAAK,SAAAC,GAAG,OAAIA,EAAIlE,OAASA,CAAjB,IAE9B,OAAIgE,EAEA,cAAC,EAAD,CACEjE,OAAQiE,IAKPhE,CACR,EAEKmE,EAAgB,SAACC,GACrB,IAIIC,EAAW,KAaf,OAXIP,IAAaM,IACfC,EAAW5E,EACP,KACA,QAGY,CAChBD,KAbcsE,IAAaM,GAAwB,SAAV3E,EACvC,KACA2E,EAYF3E,MAAO4E,EAIV,EAEKC,EAAe,SAACF,GACpB,OAAOnH,IACL,MACA,CAAE,UAAW6G,IAAaM,GAC1B,CAAE,aAAcN,IAAaM,GAAwB,SAAV3E,GAC3C,CAAE,eAAgBqE,IAAaM,GAAwB,SAAV3E,GAEhD,EAED,OACE,wBACE,UAAQ,cACRtC,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEiF,OAAQ+B,EAAc,QADxB,SAGE,sBAAMhH,UAAU,OAAhB,SACE,mBACEA,UAAWmH,EAAa,mBAOlC,6BACE,uBAAMnH,UAAU,8BAAhB,gBAEE,cAAC,EAAD,CACEiF,OAAQ+B,EAAc,OADxB,SAGE,sBAAMhH,UAAU,OAAhB,SACE,mBACEA,UAAWmH,EAAa,kBAOlC,6BACE,uBAAMnH,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEiF,OAAQ+B,EAAc,QADxB,SAGE,sBAAMhH,UAAU,OAAhB,SACE,mBACEA,UAAWmH,EAAa,mBAOlC,6BACE,uBAAMnH,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEiF,OAAQ+B,EAAc,QADxB,SAGE,sBAAMhH,UAAU,OAAhB,SACE,mBACEA,UAAWmH,EAAa,mBAOlC,wCACA,6CAIJ,gCACGlG,EAAOmF,KAAI,SAAAxD,GACV,IACET,EAKES,EALFT,IACAgB,EAIEP,EAJFO,KACAQ,EAGEf,EAHFe,KACAZ,EAEEH,EAFFG,WACAD,EACEF,EADFE,WAGF,OACE,qBACE,UAAQ,SAER9C,UAAWF,IAAW,CACpB,yBAA0B8C,EAAO2D,OAASE,IAJ9C,UAOE,6BACE,cAAC,EAAD,CACE7D,OAAQA,MAIZ,6BAAKT,IACL,6BAAKgB,IACL,6BAAKQ,IACL,6BAAKiD,EAAc9D,KACnB,6BAAK8D,EAAc7D,OAfdH,EAAOC,KAkBjB,QAIR,ECrKYuE,EAAa,WACxB,MT8GeC,qBAAWvG,GS7GxBG,EADF,EACEA,OAAQC,EADV,EACUA,QAASC,EADnB,EACmBA,aAAcC,EADjC,EACiCA,aAGjC,EAAuB+D,cAAhBC,EAAP,oBACMlD,EAAQkD,EAAaI,IAAI,UAAY,GACrCrD,EAAMiD,EAAaI,IAAI,QAAU,GACjCpD,EAAYgD,EAAaK,OAAO,cAAgB,GAChDpD,EAAO+C,EAAaI,IAAI,SAAW,GACnClD,EAAQ8C,EAAaI,IAAI,UAAY,GAErC8B,EAAiBC,mBAAQ,WAC7B,OAAOnG,EAAa,CAClBc,QAAOC,MAAKC,YAAWC,OAAMC,SAEhC,GAAE,CAACrB,EAAQiB,EAAOE,EAAWD,EAAKE,EAAMC,IAEzC,OACE,qCACE,oBAAItC,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACGiB,EAAOgC,OAAS,GACf,cAAC,EAAD,MAIJ,qBAAKjD,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGkB,GAAY,cAAC,EAAD,IAEZC,GACC,mBAAG,UAAQ,qBAAX,mCAKCF,EAAOgC,SAAW9B,IAAiBD,GACpC,mBAAG,UAAQ,kBAAX,gDAKAoG,EAAerE,QACf,yFAGAqE,EAAerE,SAAW/B,GAC1B,cAAC,EAAD,CACED,OAAQqG,gBASzB,ECpEYE,EAAY,WACvB,OACE,oBAAIxH,UAAU,QAAd,2BAEH,ECKYyH,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUzH,GAAG,QAE1C,cAAC,IAAD,CACEwH,KAAK,SACLC,QAAS,cAAC,EAAD,IAFX,SAIE,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,QAGjC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,cAff,ECFpBE,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,I","file":"static/js/main.43387762.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Filters } from '../types/Filters';\nimport { Context } from './Context';\nimport { getCentury } from '../utils/getCentury';\n\nexport const PeopleContext = React.createContext<Context>({\n  people: [],\n  loading: false,\n  loadingError: false,\n  filterPeople: () => [],\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nenum SortValues {\n  name = 'name',\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n}\n\nenum OrderValue {\n  desc = 'desc',\n}\n\nexport const UsersProvider: React.FC<Props> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setLoadingError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  const filterPeople = (\n    {\n      query = '',\n      sex = '',\n      centuries = [],\n      sort = '',\n      order = '',\n    }: Filters,\n  ): Person[] => {\n    let preparedPeople = [...people];\n\n    const preparedQuery = query.trim().toLowerCase();\n\n    if (preparedQuery) {\n      preparedPeople = preparedPeople.filter(person => {\n        const { name, motherName, fatherName } = person;\n\n        return name.toLowerCase().includes(preparedQuery)\n          || motherName?.toLowerCase().includes(preparedQuery)\n          || fatherName?.toLowerCase().includes(preparedQuery);\n      });\n    }\n\n    if (sex) {\n      preparedPeople = preparedPeople.filter(person => person.sex === sex);\n    }\n\n    if (centuries.length > 0) {\n      preparedPeople = preparedPeople.filter(person => {\n        const { born } = person;\n        const personCentury = getCentury(born);\n\n        return centuries.includes(personCentury);\n      });\n    }\n\n    if (sort) {\n      preparedPeople.sort((person1, person2) => {\n        switch (sort) {\n          case SortValues.name:\n          case SortValues.sex:\n            return person1[sort].localeCompare(person2[sort]);\n\n          case SortValues.born:\n          case SortValues.died:\n            return person1[sort] - person2[sort];\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order === OrderValue.desc) {\n      preparedPeople.reverse();\n    }\n\n    return preparedPeople;\n  };\n\n  const value = {\n    people,\n    loading,\n    loadingError,\n    filterPeople,\n  };\n\n  return (\n    <PeopleContext.Provider value={value}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n\nexport function usePeople() {\n  const people = useContext(PeopleContext);\n\n  return people;\n}\n","export function getCentury(year: number) {\n  return String(!(year % 100)\n    ? Math.trunc(year / 100)\n    : Math.trunc(year / 100) + 1);\n}\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || null;\n  const allCenturies = ['16', '17', '18', '19', '20'];\n\n  function getNewCenturies(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(letter => letter !== century)\n      : [...centuries, century];\n  }\n\n  const allCenturiesLink = (Centuries: string[]) => {\n    return (Centuries.map(century => (\n      <SearchLink\n        params={{ centuries: getNewCenturies(century) }}\n        data-cy=\"century\"\n        className={classNames(\n          'button mr-1',\n          { 'is-info': centuries.includes(century) },\n        )}\n        key={century}\n      >\n        {century}\n      </SearchLink>\n    )));\n  };\n\n  function setSearchWith(params: SearchParams) {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value || null });\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({\n            'is-active': !sex,\n          })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={query}\n            onChange={handleQueryChange}\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturiesLink(allCenturies)}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': centuries.length > 0 },\n              )}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, slug, sex } = person;\n\n  return (\n    <NavLink\n      to={slug}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </NavLink>\n  );\n};\n","import React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const { slugId } = useParams();\n  const sortType = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const getParentLink = (name: string | null) => {\n    if (!name) {\n      return '-';\n    }\n\n    const parent = people.find(par => par.name === name);\n\n    if (parent) {\n      return (\n        <PersonLink\n          person={parent}\n        />\n      );\n    }\n\n    return name;\n  };\n\n  const getSortParams = (changeSort: string) => {\n    const newSort = sortType === changeSort && order === 'desc'\n      ? null\n      : changeSort;\n\n    let newOrder = null;\n\n    if (sortType === changeSort) {\n      newOrder = order\n        ? null\n        : 'desc';\n    }\n\n    const newParams = {\n      sort: newSort,\n      order: newOrder,\n    };\n\n    return newParams;\n  };\n\n  const getSortClass = (changeSort: string) => {\n    return classNames(\n      'fas',\n      { 'fa-sort': sortType !== changeSort },\n      { 'fa-sort-up': sortType === changeSort && order !== 'desc' },\n      { 'fa-sort-down': sortType === changeSort && order === 'desc' },\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={getSortParams('name')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('name')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={getSortParams('sex')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('sex')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={getSortParams('born')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('born')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={getSortParams('died')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('died')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.name}\n              className={classNames({\n                'has-background-warning': person.slug === slugId,\n              })}\n            >\n              <td>\n                <PersonLink\n                  person={person}\n                />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>{getParentLink(motherName)}</td>\n              <td>{getParentLink(fatherName)}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useMemo } from 'react';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\nimport { usePeople } from '../../store/peopleContext';\n\nexport const PeoplePage = () => {\n  const {\n    people, loading, loadingError, filterPeople,\n  } = usePeople();\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const filteredPeople = useMemo(() => {\n    return filterPeople({\n      query, sex, centuries, sort, order,\n    });\n  }, [people, query, centuries, sex, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people.length > 0 && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && (<Loader />)}\n\n              {loadingError && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {(!people.length && !loadingError && !loading) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!filteredPeople.length && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {(filteredPeople.length && !loading) && (\n                <PeopleTable\n                  people={filteredPeople}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const ErrorPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { UsersProvider } from './store/peopleContext';\nimport { HomePage } from './components/Pages/HomePage';\nimport { PeoplePage } from './components/Pages/PeoplePage';\nimport { ErrorPage } from './components/Pages/ErrorPage';\n\nexport const Root = () => (\n  <Router>\n    <UsersProvider>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n\n          <Route\n            path=\"people\"\n            element={<PeoplePage />}\n          >\n            <Route path=\":slugId\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Route>\n      </Routes>\n    </UsersProvider>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}